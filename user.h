
#ifndef USER_GUARD__H 
#define USER_GUARD__H

#include <stdlib.h>
#include <stdio.h>
#include <string.h>


//librarian if username "librarian" 
//and password "librarian"
struct User{

    char *username;
    char *password;
    char *borrowed_book;

};

struct UserArray {
	struct User* array; // pointer to array of struct User.
	unsigned int length; // number of elements in the struct User * UserArray:
	unsigned int users_number; //current number of users in the array
};



//prints Database ( =allUsers)
void print_UserArray_Database();

//creates a struct User
//allocates memory for strings that needs to be freed with free_User()
//borrowed_book has the format "title,authors", can be NULL
struct User create_User(const char* username, const char *password, char *borrowed_book);

//eliminates User properly
//frees memory allocated for all strings
void free_User(struct User user);

//stores the Database of Users in the specified file
//returns 0 if users were stored correctly, or an error code otherwise
int store_Users(FILE *file);
    
//loads the Database of Users from the specified file
//the file must have been generated by a previous call to store_Users()
//returns 0 if users were loaded correctly, or an error code otherwise
int load_Users(FILE *file);

//adds an existing User to the UserArray Database
//returns 0 if the User could be added, or an error code otherwise
//parameter should be user created with create_User()
int register_User(struct User user);

//removes User from UserArray Database and eliminates User with free_User()
//returns 0 if the book could be successfully removed, or an error code otherwise.
int remove_User(struct User user);

//returns 0 if the User could log in, or an error code otherwise
int login_User(char *username, char *password);

//not deep deleting any allocated memory, just de-assigning pointers, all users still in UserArray Database
int logout_User();

//returns 0 if the User could log in, or an error code otherwise
int find_book_by_title_User(const char *title );

//returns 0 if the User could log in, or an error code otherwise
int find_book_by_authors_User(const char *authors);

//returns 0 if the User could log in, or an error code otherwise
int add_Book_Librarian(struct Book book);

//returns 0 if the User could log in, or an error code otherwise
int remove_Book_Librarian(struct Book book);

//for the sake of simplicity, each user can only borrow 1 book
// allocates memory for a borrowed_book string
//returns 0 if the User could log in, or an error code otherwise
int borrow_Book_User(const char *title, const char *authors);

//returns 0 if the User could log in, or an error code otherwise
int return_Book_User();

//removes everything from UserArray Database properly
void cleanup_UserArray_Database();


#endif
