
#ifndef BOOK_MANAGEMENT_GUARD__H 
#define BOOK_MANAGEMENT_GUARD__H

#include <stdio.h>

struct Book {
		char *title; //book title
		char *authors; //comma separated list of authors
		unsigned int year; // year of publication
		unsigned int copies; //number of copies the library has
		unsigned int borrowed; 
};

struct BookArray {
	struct Book* array; // pointer to array of struct Book.
	unsigned int length; // number of elements in the struct Book * BookArray
	unsigned int books_number; //current number of books in the array
};

//NOTE:  FILE * is the output of fopen() in stdio.h.

//prints BookArray Database ( =allBooks)
void print_BookArray_Database();

//prints any BookArray
void print_BookArray(struct BookArray books);

//creates a struct Book
//allocates memory for strings that needs to be freed with free_Book()
struct Book create_Book(const char* title,const char* authors, int year, int copies, int borrowed);

//eliminates Book properly
//frees memory allocated for all strings
void free_Book(struct Book book);

//stores the Database of Books in the specified file
//returns 0 if books were stored correctly, or an error code otherwise
int store_books(FILE *file);

//loads the Database of Books from the specified file
//the file must have been generated by a previous call to store_books()
//returns 0 if books were loaded correctly, or an error code otherwise
int load_books(FILE *file);

//adding a book to the library means adding the reference to the library, regardless of how many copies exist
//adds an existing Book to the BookArry Database
//returns 0 if the Book could be added, or an error code otherwise
//parameter should to be book created with create_Book()
int add_book(struct Book book);

//removing book from the library means removing the reference from the library,regardless of how many copies exist and then eliminating it properly
//removes Book from BookArray Database and eliminates Book with free_Book()
//returns 0 if the book could be successfully removed, or an error code otherwise. 
int remove_book(struct Book book);

//finds books with a given title.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
//NOTE: allocates memory! for BookArray.array that needs to be freed with normal free()
struct BookArray find_book_by_title (const char *title);

//finds books with the given authors.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
//NOTE: allocates memory! for BookArray.array that needs to be freed with normal free()
struct BookArray find_book_by_author (const char *author);

//finds books published in the given year.
//returns a BookArray structure, where the field "array" is a newly allocated array of books, or null if no book with the 
//provided title can be found. The length of the array is also recorded in the returned structure, with 0 in case
//array is the null pointer.
//NOTE: allocates memory! for BookArray.array that needs to be freed with normal free()
struct BookArray find_book_by_year (unsigned int year);

//returns 0 if Book could be borrowed, or error code otherwise
int borrow_Book(const char *title, const char *authors);

//returns 0 if Book could be returned, or error code otherwise
int return_Book(const char *title, const char *authors);

//removes everything from BookArray Database properly
void cleanup_BookArray_Database();


#endif
